<?php
/**
 * This file is part of Tricho and is copyright (C) Transmogrifier E-Solutions.
 * It is released under the GNU General Public License, version 3 or later.
 * See COPYRIGHT.txt and LICENCE.txt in the tricho directory for more details.
 */

/**
 * @package main_system
 */

/**
 * Used to draw a row in a MainTable
 * 
 * @package main_system
 */
class MainRow {
    
    private $use_ordering;
    private $order_identifier;
    private $primary_key;
    private $row;
    
    /**
     * @param array $data_fields the data for the row (generated by fetch_assoc
     *        or a similar method)
     * @param array $pk_cols the values of the array are the
     *        {@link QueryColumn}s for the primary key columns of the table
     *        that this row belongs to
     * @param array $order_cols the values of the array are the
     *        {@link OrderColumn}s for the order columns of the table that this
     *        row belongs to
     */
    function __construct ($data_fields, $pk_cols, $order_cols) {
        
        if (is_array ($data_fields)) {
            
            $this->row = $data_fields;
            
            $pk = null;
            $pk_count = 0;
            foreach ($pk_cols as $pk_col) {
                if ($pk_count++ > 0) $pk .= ',';
                $pk .= $data_fields[$pk_col->identify ('row')];
            }
            $this->primary_key = $pk;
            
            $order_data = array ();
            foreach ($order_cols as $order_col) {
                if (is_array ($order_col)) {
                    $order_col_array = $order_col;
                    foreach ($order_col_array as $order_col) {
                        $order_data[] = $data_fields[$order_col->getColumn ()->identify ('row')];
                    }
                    continue;
                }
                $order_data[] = $data_fields[$order_col->getColumn ()->identify ('row')];
            }
            // remove final order field because grouping cannot include the final order field
            // eg ORDER BY SubOf, OrderNum can only group by SubOf
            array_pop ($order_data);
            $this->setOrderIdentifier ($order_data);
            
        } else {
            $this->order_identifier = null;
            $this->primary_key = null;
        }
    }
    
    /**
     * @return string
     */
    function __toString () {
        return "MainRow object (PK: {$this->primary_key})";
    }
    
    /**
     * Gets the primary key identifier for this row
     * 
     * @return string
     */
    function getPrimaryKey () {
        return $this->primary_key;
    }
    
    /**
     * Gets the data for a single column in this row
     * 
     * @return string
     */
    function get ($field_name) {
        return $this->row[$field_name];
    }
    
    /**
     * Gets the data for all columns in this row
     * 
     * This is used only for debugging
     * 
     * @return string
     */
    function getAllData () {
        $i = 0;
        $all_data = '';
        foreach ($this->row as $key => $data) {
            if ($i++ > 0) $all_data .= ', ';
            $all_data .= "{$key}::{$data}";
        }
        return $all_data;
    }
    
    /**
     * Gets the order identifier for this row.
     * 
     * This is used to determine ordering groups, and thus whether up/down
     * arrows should be shown
     * 
     * @return string
     */
    function getOrderIdentifier () {
        return $this->order_identifier;
    }
    
    /**
     * Sets the order identifier for this row.
     * 
     * This is used to determine ordering groups, and thus whether up/down
     * arrows should be shown
     * 
     * @param array $arr the values of the order columns
     */
    private function setOrderIdentifier ($arr) {
        
        $value = '';
        if (is_array ($arr)) {
            $i = 0;
            foreach ($arr as $element) {
                if ($i++ > 0) {
                    $value .= ',';
                }
                if (is_numeric ($element)) {
                    $value .= $element;
                } else {
                    $value .= "'". str_replace ("'", "''", $element). "'";
                }
            }
        } else if (is_string ($arr)) {
            $value = $arr;
        }
        
        $this->order_identifier = $value;
    }
    
}

?>
